pipeline{
agent { label 'aws' }
environment{
TOKENAWS = credentials('aws_credentials')
TEST_RESULT_FILE = 'test_result.txt'
}

    stages{
        stage('Deploy to Testing'){
            steps{
            sh 'ssh -T -oStrictHostKeyChecking=no -i "$TOKENAWS" ec2-user@18.234.83.194 "sudo dnf update; sudo dnf install git -y; sudo dnf install -y httpd; sudo systemctl start httpd; sudo git clone https://github.com/mickaelayuriko/FinalExam.git /var/www/html"'
            script {
                try {
                    sh 'npm install selenium-webdriver'

                    def output = sh(script: 'node tests/test.js', returnStdout: true).trim()
                    echo "Test Output: ${output}"

                    if(output.contains('Test Success')){
                        writeFile file: env.TEST_RESULT_FILE, text: 'true'
                    } else {
                        writeFile file: env.TEST_RESULT_FILE, text: 'false'
                    }
                } catch (Exception e) {
                    echo "Test failed: ${e.message}"
                    writeFile file: env.TEST_RESULT_FILE, text: 'false'
                }
            }
            
            }
        }

        stage('Deploy to Staging'){
            when {
               expression {
                def testResult = readFile(env.TEST_RESULT_FILE).trim()
                return testResult == 'true'
                }           
            }
            steps{
            sh 'ssh -T -oStrictHostKeyChecking=no -i "$TOKENAWS" ec2-user@54.167.254.7 "sudo dnf update; sudo dnf install git -y; sudo dnf install -y httpd; sudo systemctl start httpd; sudo git clone https://github.com/mickaelayuriko/FinalExam.git /var/www/html"'
            }
        }
        
        stage('Deploy to Production_1 and Production_2'){
            when {
               expression {
                def testResult = readFile(env.TEST_RESULT_FILE).trim()
                return testResult == 'true'
                }           
            }
            steps{
            script {
                    def servers = [
                        '3.84.184.162',  // IP for Production_1
                        '54.166.105.196' // IP for Production_2
                    ]
                    for (server in servers) {
                       sh """
                       ssh -T -oStrictHostKeyChecking=no -i "\$TOKENAWS" ec2-user@${server} "sudo dnf update; sudo dnf install git -y; sudo dnf install -y httpd; sudo systemctl start httpd; sudo git clone https://github.com/mickaelayuriko/FinalExam.git /var/www/html"
                       """
                    }
                }
            }
        }

    }
}